102. Binary Tree Level Order Traversal(https://leetcode.com/problems/binary-tree-level-order-traversal/)

class Solution(object):
    def levelOrder(self, root):#定义二维数组
        """
        :type root: TreeNode
        :rtype: List[List[int]]
        """
        res = []
        self.level(root, 0, res)#调用level函数，root初始值是root，level初始值是0，res初始值是res
        return res

    def level(self, root, level, res):
        if not root: #如果root不存在，返回空集
            return
        
        if len(res) == level:#
            res.append([])
        res[level].append(root.val)
        
        if root.left: 
            self.level(root.left, level + 1, res)
        if root.right: 
            self.level(root.right, level + 1, res)
            
            
            
            
107. Binary Tree Level Order Traversal II(https://leetcode.com/problems/binary-tree-level-order-traversal-ii/)
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right

        
class Solution:
    def levelOrderBottom(self, root: TreeNode) -> List[List[int]]:
        """
        :type root: TreeNode
        :rtype: List[List[int]]
        """
        res = []
        self.level(root, 0, res)#调用level函数，root初始值是root，level初始值是0，res初始值是res
        return res[::-1]

    def level(self, root, level, res):
        if not root: #如果root不存在，返回空集
            return
        
        if len(res) == level:
            res.append([])            
        res[level].append(root.val)
        
        if root.left: 
            self.level(root.left, level + 1, res)
        if root.right: 
            self.level(root.right, level + 1, res)
    
    
 103. Binary Tree Zigzag Level Order Traversal(https://leetcode.com/problems/binary-tree-zigzag-level-order-traversal/)
 # Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def zigzagLevelOrder(self, root: TreeNode) -> List[List[int]]:
        res = []
        self.level(root, 0, res)#调用level函数，root初始值是root，level初始值是0，res初始值是res
        return res

    def level(self, root, level, res):
        if not root: #如果root不存在，返回空集
            return
        
        if len(res) == level:#
            res.append(deque([root.val]))
        else:
            if level%2 == 0:
                res[level].append(root.val)
            else:
                res[level].appendleft(root.val)       

        if root.left: 
            self.level(root.left, level + 1, res)
        if root.right: 
            self.level(root.right, level + 1, res)
            
