## Daily practice：
[1313. Decompress Run-Length Encoded List](https://leetcode.com/problems/decompress-run-length-encoded-list/)
'''
class Solution:
    def decompressRLElist(self, nums: List[int]) -> List[int]:
        ans = []
        for i in range(0, len(nums), 2):
            ans += [nums[i+1]]*nums[i]
        return ans
'''

[1678. Goal Parser Interpretation](https://leetcode.com/problems/goal-parser-interpretation/)
'''
Solution 1:
class Solution:
    def interpret(self, command: str) -> str:
        ans, i = [], 0
        while i < len(command):
            c = command[i]
            if c == 'G':
                ans += [c]
                i += 1
            elif c == '(' and command[i + 1] == ')':
                ans += ['o']
                i += 2
            else:
                ans += ['al']
                i += 4
        return ''.join(ans)
        
        

solution2
class Solution:
    def interpret(self, command: str) -> str:
        return command.replace("()","o").replace("(al)","al")
        
'''


# Day2_二叉树

---

## LeetcodeReview

---

def printPreorder(root): 
  
    if root: 
        print(root.val), 
        printPreorder(root.left) 
        printPreorder(root.right) 
        
def printInorder(root): 
  
    if root: 
        printInorder(root.left) 
        print(root.val), 
        printInorder(root.right) 
        
def printPostorder(root): 

    if root: 
        printPostorder(root.left) 
        printPostorder(root.right) 
        print(root.val)
        

[144:Binary Tree Preorder Traversal 二叉树前序遍历](https://leetcode.com/problems/binary-tree-preorder-traversal/)

```
# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution(object):
    ##--------------------------------------------------------------------------
    ##建立类函数dfs协助进行递归遍历，如果node存在就加入list然后依次调用左右node，然后在主体函数中调用DFS函数
    def preorderTraversal(self, root):
        """
        :type root: TreeNode
        :rtype: List[int]
        """
        ##建立空列表存储结果，调用self.dfs后返回结果
        result = []
        self.dfs(root,result)
        return result
    
    def dfs(self,root,result):
        ##考虑边界情况root为空，后再加入结果列表，再加左右结点
        if root:
            result.append(root.val)
            self.dfs(root.left,result)
            self.dfs(root.right,result)
```
**Analysis**

Time Complexity: O(n)--每次调用递归进行遍历，每个点1次

Space Complexity: O(n)--res线性添加遍历出的节点

---
[94:Binary Tree Inorder Traversal 二叉树中序遍历](https://leetcode.com/problems/binary-tree-inorder-traversal/)

```
class Solution(object):
    
    ##------------------------------------------------
    ##先建立helper function dfs来进行中序排列递归，然后在主体函数中调用dfs来存储结果列表
    def inorderTraversal(self, root):
        """
        :type root: TreeNode
        :rtype: List[int]
        """
        res = []
        self.dfs(root,res)
        return res
    ##helper function:
    def dfs(self,root,res):
        if root:
            self.dfs(root.left,res)
            res.append(root.val)
            self.dfs(root.right,res)
```

**Analysis**

Time Complexity: O(n)--每次调用递归进行遍历，每个点1次

Space Complexity: O(n)--res线性添加遍历出的节点

---

[145:Binary Tree Postorder Traversal 二叉树后序遍历](https://leetcode.com/problems/binary-tree-postorder-traversal/)

```
class Solution(object):
    ##道理同preorder,inorder
    def postorderTraversal(self, root):
        """
        :type root: TreeNode
        :rtype: List[int]
        """
        res = []
        self.dfs(root,res)
        return res
    
    def dfs(self,root,res):
        if root:
            self.dfs(root.left,res)
            self.dfs(root.right,res)
            res.append(root.val)
```

**Analysis**

Time Complexity: O(n)--每次调用递归进行遍历，每个点1次

Space Complexity: O(n)--res线性添加遍历出的节点

---
